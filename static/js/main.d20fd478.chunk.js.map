{"version":3,"sources":["components/PlantCardComponent.js","components/PlantListComponent.js","components/ToastComponent.js","components/FilterNavComponent.js","components/GuideComponent.js","shared/plants.js","shared/explainers.js","components/MainComponent.js","components/ScrollToTopComponent.js","App.js","reportWebVitals.js","index.js"],"names":["PlantCard","props","MaybeImg","plant","imageURL","CardImg","src","plantFilter","to","name","Card","className","onClick","collapse","collapseHandler","CardBody","CardTitle","CardText","description","PlantList","style","marginTop","navHeight","id","plants","map","Toasts","React","useEffect","filterItems","document","querySelectorAll","i","length","addEventListener","ev","updateCriteria","target","dataset","critval","ToastItems","criteria","criterium","data-critval","Toast","ToastHeader","icon","width","height","xmlns","preserveAspectRatio","focusable","role","fill","toggle","clearCriteria","crittype","ToastBody","FilterNav","isSticky","sticky","navbarRef","useRef","useState","isOpen","setIsOpen","handleScroll","stickiness","guideHeight","console","log","window","scrollY","updateSticky","updateNavHeight","navRect","current","getBoundingClientRect","handleScrollEvent","removeEventListener","Dropdowns","valCheck","classList","add","clearItems","critclear","Nav","navbar","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","data-crittype","divider","data-critclear","RenderToasts","makeToasts","type","undefined","find","filter","maxWidth","ref","Navbar","light","expand","NavbarBrand","href","NavbarToggler","Collapse","placeholder","value","formValue","onChange","formControll","Guide","status","setStatus","currentPlant","setPlant","guideRef","GuideContent","PopoverItem","position","topic","popoverOpen","setPopoverOpen","class","Popover","trigger","placement","PopoverHeader","PopoverBody","popovers","InnerContent","popover","longDescription","SinglePlantGuide","plantName","useParams","updateGuideHeight","guideRect","onEntering","onEntered","onExiting","onExited","path","heightofplant","lightofplant","careofplant","PLANTS","keywords","Math","floor","random","care","forEach","explainer","index","splice","Main","state","searchValue","bind","cardValue","this","cardheight","cardlight","cardcare","indexOf","toLowerCase","val","currentVal","push","setState","clear","item","check","rectHeight","Component","ScrollToTop","pathname","useLocation","scrollTo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d20fd478.chunk.js","sourcesContent":["import { Card, CardImg, CardBody, CardText, CardTitle } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\n\nfunction PlantCard(props) {\n\n    const MaybeImg = () => {\n        if(props.plant.imageURL) {return(<CardImg src={props.plant.imageURL}/>)} else {return null}}\n\n    if(props.plantFilter(props.plant)) {\n        return(\n            <Link to={`/${props.plant.name}`}>\n                <Card className={!props.plant.imageURL ? \"explainer\" : \"\"} onClick={() => {if (!props.collapse) {\n                props.collapseHandler();\n            }}}>\n                    <MaybeImg/>\n                    <CardBody>\n                        <CardTitle>\n                            {props.plant.name}\n                        </CardTitle>\n                        <CardText>\n                            {props.plant.description}\n                        </CardText>\n                    </CardBody>\n                </Card>\n            </Link>\n            );\n        } else {\n            return null;\n        }\n}\n\nexport default PlantCard;","import React from 'react';\nimport PlantCard from './PlantCardComponent';\n\nfunction PlantList(props) {\n    return(\n        <div className=\"container\" style={{ marginTop: props.navHeight }}>\n            <div className=\"container\" id=\"plantlist\">\n                <div className=\"row row-content\">\n                    <div className=\"\" id=\"plantlist-inner\">\n                        <div className='card-columns'>\n                            {props.plants.map(function(plant) {return(<PlantCard plantFilter={props.plantFilter} plant={plant} collapseHandler={props.collapseHandler} collapse={props.collapse}/>)})}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PlantList;","import React, { useState } from 'react';\nimport { Toast, ToastBody, ToastHeader } from 'reactstrap';\n\n\nfunction Toasts(props) {\n    React.useEffect(() => {\n        var filterItems = document.querySelectorAll('.toast-p');\n        for (let i = 0; i < filterItems.length; i++) {\n            filterItems[i].addEventListener(\"click\", (ev) => props.updateCriteria(null, ev.target.dataset.critval));\n        }\n    }, []);\n\n    const toggle = () => props.clearCriteria(props.crittype)\n\n    const ToastItems = props.criteria.map((criterium) =>  {\n        return(\n            <p className=\"toast-p\"><a className=\"toast-link text-decoration-none\" data-critval={criterium[1]}>{criterium[1]}</a></p>\n            )\n    })\n    //const [show, setShow] = useState(true);\n\n    return(\n        <Toast /*isOpen={show}*/>\n            <ToastHeader icon={<svg className=\"bd-placeholder-img rounded mr-2\" width=\"20\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\" focusable=\"false\" role=\"img\"><rect width=\"100%\" height=\"100%\" fill=\"bisque\"></rect></svg>} toggle={toggle}>\n                {props.crittype}\n            </ToastHeader>\n            <ToastBody>\n                {ToastItems}\n            </ToastBody>\n        </Toast>\n    )\n}\n\n\nexport default Toasts;","import React, { useState, useEffect, useRef } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    NavbarText\n  } from 'reactstrap';\nimport Toasts from './ToastComponent';\n\nfunction FilterNav(props) {\n    \n    const isSticky = props.sticky === true ? 'navbar-sticky' : '';\n    \n    const navbarRef = useRef(null);\n    \n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    const handleScroll = (stickiness, guideHeight, navHeight) => {\n        console.log(\"scrollY in here is\" + window.scrollY);\n        if (window.scrollY >= guideHeight) {\n            if (stickiness != true) {\n                props.updateSticky(true);\n                props.updateNavHeight(navHeight);\n            }\n        } else {\n            if (stickiness != false) {\n                props.updateSticky(false);\n                props.updateNavHeight(0);\n            }\n        }\n    }\n\n    useEffect(() => { \n        var navRect = navbarRef.current.getBoundingClientRect();   \n        const handleScrollEvent = () => {\n            handleScroll(props.sticky, props.guideHeight, navRect.height)\n          }\n        window.addEventListener('scroll', handleScrollEvent)\n        \n        return () => {\n            window.removeEventListener('scroll', handleScrollEvent);\n          };\n    }, [props.guideHeight, props.sticky])\n\n    useEffect(() => { \n        var navRect = navbarRef.current.getBoundingClientRect();\n        handleScroll(props.sticky, props.guideHeight, navRect.height)\n    }, [props.guideHeight])\n\n    const Dropdowns = (props) => {\n        \n        useEffect(() => {\n            var filterItems = document.querySelectorAll('.filter-item');\n            for (let i = 0; i < filterItems.length; i++) {\n                filterItems[i].addEventListener(\"click\", (ev) => props.updateCriteria(ev.target.dataset.crittype, ev.target.dataset.critval));\n                if (props.valCheck(filterItems[i])) {filterItems[i].classList.add(\"active\")}\n            }\n            var clearItems = document.querySelectorAll('.clear-item');\n            for (let i = 0; i < clearItems.length; i++) {\n                clearItems[i].addEventListener(\"click\", (ev) => props.clearCriteria(ev.target.dataset.critclear))\n            }\n        }, []);\n        \n        return(\n            <Nav className=\"navbar-nav d-flex\" navbar>\n                <NavItem id=\"guideitem\" className=\"nav-item active\">\n                <NavLink id=\"guidebutton\" role=\"button\" onClick={props.collapseHandler}>Guide</NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                    Height\n                    </DropdownToggle>\n                    <DropdownMenu id=\"plantheight\">\n                        <DropdownItem className=\"filter-item\" data-crittype=\"height\" data-critval=\"0 to 1 foot\">0 to 1 foot</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"height\" data-critval=\"1 to 3 feet\">1 to 3 feet</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"height\" data-critval=\"3 to 6 feet\">3 to 6 feet</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"height\" data-critval=\"6 to 9 feet\">6 to 9 feet</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"height\" data-critval=\"over 9 feet\">over 9 feet</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem className=\"clear-item\" data-critclear=\"height\">Clear All</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                    Light\n                    </DropdownToggle>\n                    <DropdownMenu id=\"plantlight\">\n                        <DropdownItem className=\"filter-item\" data-crittype=\"light\" data-critval=\"low indirect\">low indirect</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"light\" data-critval=\"bright indirect\">bright indirect</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"light\" data-critval=\"partial direct\">partial direct</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"light\" data-critval=\"full direct\">full direct</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem className=\"clear-item\" data-critclear=\"light\">Clear All</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav inNavbar>\n                    <DropdownToggle nav caret>\n                    Care\n                    </DropdownToggle>\n                    <DropdownMenu id=\"plantcare\">\n                        <DropdownItem className=\"filter-item\" data-crittype=\"care\" data-critval=\"loves neglect\">loves neglect</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"care\" data-critval=\"tolerates neglect\">tolerates neglect</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"care\" data-critval=\"needs attention\">needs attention</DropdownItem>\n                        <DropdownItem className=\"filter-item\" data-crittype=\"care\" data-critval=\"needs extra attention\">needs extra attention</DropdownItem>\n                        <DropdownItem divider />\n                        <DropdownItem className=\"clear-item\" data-critclear=\"care\">Clear All</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n            </Nav>\n            )\n    };\n\n    const RenderToasts = (props) => {\n        const types = [\"height\", \"light\", \"care\"];\n        const makeToasts =\n            types.map((type) => {\n              if (props.criteria && props.criteria.find(function(criterium) {return (criterium[0] == type)}) != undefined) {\n                  return(\n                    <Toasts updateCriteria={props.updateCriteria} clearCriteria={props.clearCriteria} criteria={props.criteria.filter(function(criterium) {return (criterium[0] == type)})} crittype={type}/>\n                  )\n                }  \n              });\n        \n        return(\n                    <div className=\"d-none d-lg-flex\" style={{maxWidth: 200 + \"px\"}}>\n                        <div id=\"toastcontainer\">\n                            {makeToasts}\n                        </div>\n                    </div>\n        )\n    }\n    \n    return(\n        <div id=\"navbarcontainer\" className={isSticky} ref={navbarRef}>\n            <div className=\"container\">\n                <Navbar light expand=\"lg\">\n                    <NavbarBrand href=\"#\">Plant Selector</NavbarBrand>\n                    <NavbarToggler onClick={toggle}/>\n                    <Collapse isOpen={isOpen} navbar className=\"justify-content-between\">\n                        <Dropdowns valCheck={props.valCheck} updateCriteria={props.updateCriteria} clearCriteria={props.clearCriteria} collapseHandler={props.collapseHandler}/>\n                        <form className=\"form-inline navbar-nav\">\n                            <input className=\"form-control\" id=\"plantsearch\" type=\"search\" placeholder=\"Keyword Search\" value={props.formValue} onChange={props.formControll}/>\n                        </form>\n                    </Collapse>\n                    <RenderToasts updateCriteria={props.updateCriteria} clearCriteria={props.clearCriteria} criteria={props.criteria}/>\n                </Navbar>\n            </div>\n        </div>\n    )\n}\n\nexport default FilterNav;","import React, { useState, useEffect, useRef } from 'react';\nimport { Collapse, Popover, UncontrolledPopover, PopoverBody, PopoverHeader } from 'reactstrap';\nimport { Router, Switch, Route, Redirect, useParams } from 'react-router-dom';\n\n\n\n\n\nfunction Guide(props) {\n    const [status, setStatus] = useState('Closed');\n\n    const [currentPlant, setPlant] = useState(null);\n\n    const onPlantChange = (plant) => setPlant(plant);\n  \n    const onEntering = () => setStatus('Opening...');\n  \n    const onEntered = () => setStatus('Opened');\n  \n    const onExiting = () => setStatus('Closing...');\n  \n    const onExited = () => setStatus('Closed');\n\n    const guideRef = useRef(null);\n\n    useEffect(() => {\n            //get the height of the guide and make that the offset value\n            let guideRect = guideRef.current.getBoundingClientRect();\n            props.updateGuideHeight(guideRect.height);\n        }, [status, currentPlant])\n    \n\n    function GuideContent(props) {\n\n        useEffect(() => {\n            onPlantChange(props.plant);\n        }, [props.plant])\n\n        const PopoverItem = (props) => {\n\n            const { position, topic, plant } = props;\n\n            const [popoverOpen, setPopoverOpen] = useState(false);\n\n            const toggle = () => setPopoverOpen(!popoverOpen);\n\n            return(\n                <div class={\"modal-popover \" + position}>\n                    <a id={\"Popover-\" + position} role=\"button\" ></a>\n                    <Popover trigger=\"hover\" placement=\"right\" isOpen={popoverOpen} target={\"Popover-\" + position} toggle={toggle}>\n                        <PopoverHeader>{topic}</PopoverHeader>\n                        <PopoverBody>{plant[`${topic}`]}</PopoverBody>\n                    </Popover>\n                </div>\n            )\n        }\n\n        const popovers = [\n            {\n                position : \"top\",\n                topic : \"light\"\n            },\n            {\n                position : \"middle\",\n                topic : \"height\"\n            },\n            {\n                position : \"bottom\",\n                topic : \"care\"\n            }\n        ]\n\n        const InnerContent = () => {\n                if (props.plant.imageURL) {\n                    return(\n                        <div className=\"row row-content\">\n                            <div className=\"col-md-4\">\n                                {popovers.map((popover) => {return(<PopoverItem position={popover.position} topic={popover.topic} plant={props.plant}/>)})}\n                                <div id=\"modal-image-container\">\n                                    <img src={props.plant.imageURL}/>\n                                </div>\n                            </div>\n\n\n                          \n                            <div className=\"guide-text col-md-8\">\n                                {props.plant.longDescription}\n                            </div>\n                        </div>\n                    )\n                } else {\n                    return(\n                        <div className=\"row row-content\">\n                            <div className=\"guide-text col-12\">\n                                {props.plant.longDescription}\n                            </div>\n                        </div>\n                )\n            }\n        }\n      \n        return (\n                <div className=\"container guide\" id=\"plant-guide\">\n                    <div className=\"container guide-item\">\n                            <div className=\"row\">\n                                <div className=\"col-12\">\n                                    <h4>{props.plant.name}</h4>\n                                </div>\n                            </div>\n                            <InnerContent/>\n                    </div>\n                </div>\n        )\n    }\n\n    function SinglePlantGuide(props) {\n        let { plantName } = useParams();\n        return(\n                <GuideContent  updateGuideHeight={props.updateGuideHeight} collapse={props.collapse} plant={props.plants.filter((plant) => plant.name === `${plantName}`)[0]} />\n        )\n    }\n\n    return(\n            <Collapse isOpen={props.collapse} onEntering={onEntering} onEntered={onEntered} onExiting={onExiting} onExited={onExited}>\n                <div ref={guideRef}>\n                    <Switch>\n                        <Route path=\"/:plantName\">\n                            <SinglePlantGuide updateGuideHeight={props.updateGuideHeight} collapse={props.collapse} plants={props.plants}/>\n                        </Route>\n                        <Redirect to=\"Light\"/>\n                    </Switch>\n                </div>\n            </Collapse>\n        );\n}\n\nexport default Guide;","var heightofplant = [\"0 to 1 foot\", \"1 to 3 feet\", \"3 to 6 feet\", \"6 to 9 feet\", \"over 9 feet\"];\nvar lightofplant = [\"low indirect\", \"bright indirect\", \"partial direct\", \"full direct\"];\nvar careofplant = [\"loves neglect\", \"tolerates neglect\", \"needs attention\", \"needs extra attention\"];\n\nexport const PLANTS = \n\n[\n    {\n        name: \"Ficus\",\n        imageURL: \"/assets/images/ficus.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque efficitur sagittis tellus, eget congue leo tempor quis. Nunc interdum ex nec felis commodo ultrices. Vestibulum non dui sit amet turpis ullamcorper condimentum. Quisque vitae finibus dolor. Donec at egestas nisl, at gravida ex. Etiam euismod leo tellus, eu lobortis justo venenatis non. Duis vel augue nec elit placerat aliquam sit amet a elit. Fusce in congue arcu. Nam in mauris molestie, pretium nisi eget, porttitor ligula. Maecenas lobortis sem vitae tempus dapibus. Sed sed turpis libero. Nunc ac elit id leo posuere pharetra vitae ac velit. Duis sed arcu nulla.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Antler Fern\",\n        imageURL: \"/assets/images/antlerfern.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Ut vel imperdiet dui. Maecenas ante enim, sodales at efficitur id, bibendum ut mauris. Proin volutpat est eget luctus laoreet. Curabitur suscipit posuere mi. Nullam mattis, elit in cursus aliquam, neque purus fermentum enim, eu laoreet nibh massa sed odio. Ut faucibus, sem eu egestas molestie, sapien lectus pharetra sapien, id consequat massa lacus ut dui. Donec tortor nibh, imperdiet sed porttitor a, efficitur in ante. Sed at pulvinar neque, id pretium magna. Vivamus volutpat nisl lectus, fringilla lacinia leo molestie et. Vestibulum id nisi luctus, vulputate massa eu, tincidunt velit. Proin vestibulum nunc a ex pulvinar, eget fermentum tellus porttitor. In iaculis sed erat nec vehicula. Morbi volutpat, ligula quis auctor fermentum, augue quam auctor magna, vel tincidunt nulla erat vitae dui. Sed eu est id sapien vestibulum venenatis eu et nunc. In id auctor urna, sit amet accumsan nulla. Aenean eu nisl luctus, euismod magna sit amet, imperdiet turpis.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Bird of Paradise\",\n        imageURL: \"/assets/images/birdofparadise.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Birds Nest Fern\",\n        imageURL: \"/assets/images/birdsnestfern.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Cactus\",\n        imageURL: \"/assets/images/cactus.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Dracaena\",\n        imageURL: \"/assets/images/dracaena.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Iron Plant\",\n        imageURL: \"/assets/images/ironplant.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Pothos\",\n        imageURL: \"/assets/images/pothos.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Pathos\",\n        imageURL: \"/assets/images/pothos.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n\n    {\n        name: \"Zeezee\",\n        imageURL: \"/assets/images/zeezee.jpg\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n        keywords: \"\",\n        height: heightofplant[Math.floor((Math.random() * 4))],\n        light: lightofplant[Math.floor((Math.random() * 4))],\n        care: careofplant[Math.floor((Math.random() * 4))]\n    },\n    \n];","export const EXPLAINERS =\n\n[\n    {\n        name: \"Height\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n    },\n\n    {\n        name: \"Light\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n    },\n\n    {\n        name: \"Care\",\n        description: \"Some quick example text to build on the card title and make up the bulk of the card's content.\",\n        longDescription: \"Nam odio libero, sodales nec sodales a, tempus at neque. Donec eu diam congue, placerat tellus id, ultrices eros. Nunc a mi libero. Maecenas leo sapien, scelerisque sit amet congue et, fermentum at tellus. Nunc ut dolor est. Mauris pharetra, neque ac malesuada congue, lorem nunc pellentesque nulla, auctor bibendum sapien urna bibendum erat. Duis nec vehicula nibh. Nam nec congue est, non mattis est. Ut ante mi, rhoncus a massa in, tincidunt porta mauris. Nullam sit amet tellus eu magna semper accumsan consectetur eget enim. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vestibulum sed rhoncus mauris. Aliquam erat volutpat. Suspendisse ipsum lacus, molestie sed consectetur nec, blandit vel ex. Mauris mattis, nisi nec congue sodales, erat purus ultrices ex, in tincidunt lorem elit rutrum lorem. Donec consequat pharetra tempus.\",\n    },\n]","import React, { Component } from 'react';\nimport PlantList from './PlantListComponent';\nimport FilterNav from './FilterNavComponent';\nimport Guide from './GuideComponent';\nimport { PLANTS } from '../shared/plants';\nimport { EXPLAINERS } from '../shared/explainers';\nimport ReactDOM from 'react-dom'\n\nEXPLAINERS.forEach(function(explainer, index){\n  PLANTS.splice((Math.floor((Math.random() * PLANTS.length)) + index*3), 0, explainer)\n});\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        plants: PLANTS,\n        criteria: [],\n        searchValue: \"\",\n        collapse: true,\n        guideHeight: \"\",\n        navHeight: 0,\n        sticky: false,\n    };\n    this.plantFilter = this.plantFilter.bind(this);\n    this.updateCriteria = this.updateCriteria.bind(this);\n    this.clearCriteria = this.clearCriteria.bind(this);\n    this.valCheck = this.valCheck.bind(this);\n    this.formControll = this.formControll.bind(this);\n    this.collapseHandler = this.collapseHandler.bind(this);\n    this.updateGuideHeight = this.updateGuideHeight.bind(this);\n    this.updateNavHeight = this.updateNavHeight.bind(this);\n    this.updateSticky = this.updateSticky.bind(this)\n  }\n\n  /* function to filter grid of plants based on current criteria */\n\n  plantFilter(plant) {\n    var searchValue = this.state.searchValue;\n    var cardheight = true;\n    var cardlight = true;\n    var cardcare = true;\n    for (let i = 0; i < this.state.criteria.length; i++) {\n        if (this.state.criteria[i][0] == \"height\" && plant.height && plant.height.indexOf(this.state.criteria[i][1]) > -1) {\n            cardheight = true;\n            break\n        } else if (this.state.criteria[i][0] == \"height\" && plant.height && plant.height.indexOf(this.state.criteria[i][1]) == -1) {\n            cardheight = false;\n        };\n    }\n    for (let i = 0; i < this.state.criteria.length; i++) {\n        if (this.state.criteria[i][0] == \"light\" && plant.light && plant.light.indexOf(this.state.criteria[i][1]) > -1) {\n            cardlight = true;\n            break\n        } else if (this.state.criteria[i][0] == \"light\" && plant.light && plant.light.indexOf(this.state.criteria[i][1]) == -1) {\n            cardlight = false;\n        };\n    }\n    for (let i = 0; i < this.state.criteria.length; i++) {\n        if (this.state.criteria[i][0] == \"care\" && plant.care && plant.care.indexOf(this.state.criteria[i][1]) > -1) {\n            cardcare = true;\n            break\n        } else if (this.state.criteria[i][0] == \"care\" && plant.care && plant.care.indexOf(this.state.criteria[i][1]) == -1) {\n            cardcare = false;\n        };\n    }\n    var cardValue\n    if(plant.keywords) {cardValue = plant.keywords.toLowerCase()};\n    cardValue += plant.name.toLowerCase();\n    return(cardheight && cardlight && cardcare && cardValue.indexOf(searchValue) > -1);\n  };\n\n  /* functions to edit criteria list and to update toasts and navbar links according to that list */\n\n  updateCriteria(type, val) {\n    var criterium = [];\n    if (this.state.criteria.find(function(currentVal) {return currentVal[1] == val;}) == undefined){\n        criterium.push(type);\n        criterium.push(val);\n        let criteria = this.state.criteria;\n        criteria.push(criterium);\n        this.setState({criteria : criteria});\n    } else {\n        var i = \"\";\n        while (this.state.criteria.find(function(currentVal, index) {\n            i = index;\n            return currentVal[1] == val;\n        }) != undefined) {\n          let criteria = this.state.criteria;\n          criteria.splice(i, 1);\n          this.setState({criteria: criteria});\n        }\n      }\n  };\n\n  formControll(ev) {\n    this.setState({searchValue: ev.target.value});\n  }\n\n  clearCriteria(clear) {\n    var i = \"\";\n    while (this.state.criteria.find(function(currentVal, index) {\n        i = index;\n          return currentVal[0] == clear;\n    }) != undefined) {\n        let criteria = this.state.criteria\n        criteria.splice(i, 1);\n        this.setState({criteria : criteria})\n    }\n  }\n  \n  valCheck(item) {\n    var check = item.dataset.critval;\n    return this.state.criteria.find(function(value) {return value[1] == check;}) !== undefined\n  };\n\n  /* functions to expand or collapse the guide and pass information to make the nav bar sticky on scroll */\n\n  collapseHandler() {\n    let collapse = !this.state.collapse;\n    this.setState({collapse : collapse});\n  }\n\n  updateGuideHeight(rectHeight) {\n    this.setState({guideHeight : rectHeight});\n  }\n\n  updateNavHeight(rectHeight) {\n    this.setState({navHeight : rectHeight});\n  }\n\n  updateSticky(isSticky) {\n    this.setState({sticky : isSticky});\n  }\n  \n  \n  render() {\n\n    return (\n      <div className=\"App\">\n          <Guide collapseHandler={this.collapseHandler} updateGuideHeight={this.updateGuideHeight} updateNavHeight={this.updateNavHeight} collapse={this.state.collapse} guideHeight={this.state.guideHeight} plants={this.state.plants}/>\n          <FilterNav updateCriteria={this.updateCriteria} clearCriteria={this.clearCriteria} valCheck={this.valCheck} formControll={this.formControll} collapseHandler={this.collapseHandler} updateNavHeight={this.updateNavHeight} updateSticky={this.updateSticky} criteria={this.state.criteria} formValue={this.state.searchValue} collapse={this.state.collapse} guideHeight={this.state.guideHeight} sticky={this.state.sticky}/>\n          <PlantList plants={this.state.plants} plantFilter={this.plantFilter} navHeight={this.state.navHeight} collapseHandler={this.collapseHandler} collapse={this.state.collapse}/>\n      </div>\n    );\n  }\n}\n\nexport default Main;","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n\nexport default ScrollToTop;","import Main from './components/MainComponent';\nimport ScrollToTop from './components/ScrollToTopComponent';\nimport './App.scss';\nimport React, { Component } from 'react';\nimport { HashRouter } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <HashRouter>\n      <ScrollToTop/>\n      <div className=\"App\">\n        <Main/>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}